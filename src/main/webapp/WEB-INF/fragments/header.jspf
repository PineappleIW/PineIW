
<%--
 	Standard header for all jsp pages in the site. Requires the following model variables to be set:
  	- pageTitle
  	- pageExtraCSS: additional CSS files to include (from resources/css; via link rel-stylesheet href)
  	- pageExtraScripts: additional JS files to include (from resources/js; via script src)
  	- prefix: useful to back-trace if path-based url parameters are in use
 --%>
<%@ page contentType="text/html; charset=UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>${pageTitle}</title>


<%@ taglib 
   uri="https://www.owasp.org/index.php/OWASP_Java_Encoder_Project" 
   prefix="e" %>


<script src="${prefix}resources/js/jquery.min.js"></script>
<script src="${prefix}resources/js/script.js"></script>
<link href="${prefix}resources/css/bootstrap.min.css" rel="stylesheet">
<link href="${prefix}resources/css/csspersonal.css" rel="stylesheet">
<script src="${prefix}resources/js/bootstrap.min.js"></script>
<script src="${prefix}resources/js/personal.js"></script>
<link href="${prefix}resources/css/extra.css" rel="stylesheet">
<script src="${prefix}resources/js/cuadro_texto.js"></script>
    <link href="${prefix}resources/css/scojs.css" rel="stylesheet">
    <link rel="stylesheet" href="${prefix}resources/css/jquery.fs.picker.css">
    <link href="${prefix}resources/css/jquery.fs.selecter.css" rel="stylesheet">
    <link rel="stylesheet" href="${prefix}resources/css/jquery.fs.scroller.css">
    <link rel="stylesheet" href="${prefix}resources/css/font-awesome.css">
    <link href="${prefix}resources/css/theme.css" rel="stylesheet">
    <link href="${prefix}resources/css/bootstrap1.css" rel="stylesheet">

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
  

    <script src="${prefix}resources/js/jquery.min.js"></script>

 <script src='${prefix}resources/js/jquery-ui-1.10.4.custom.min.js'></script> 
 <link rel="stylesheet" href="${prefix}resources/css/jquery-ui-1.10.4.custom.min.css">
    <script type='text/javascript' src='${prefix}resources/js/jquery.deserialize.js'></script> 
    <script type='text/javascript' src='${prefix}resources/js/jquery.facets.js'></script>
    <script type='text/javascript' src='${prefix}resources/js/dewmo.js'></script>
    <script src="${prefix}resources/js/jquery.fs.selecter.js"></script>
    <script src="${prefix}resources/js/jquery.fs.picker.js"></script>
    <script src="${prefix}resources/js/jquery.fs.scroller.js"></script>
    <script src="${prefix}resources/js/bootstrap.js"></script>
    <script src="${prefix}resources/js/theme.js"></script>
    <script src="${prefix}resources/js/sco.modal.js"></script>
    <script src="${prefix}resources/js/sco.confirm.js"></script>
    <script src="${prefix}resources/js/sco.ajax.js"></script>
    <script src="${prefix}resources/js/sco.collapse.js"></script>
    <script src="${prefix}resources/js/sco.countdown.js"></script>
    <script src="${prefix}resources/js/sco.message.js"></script>
<%-- pageExtraScripts --%>
<c:forEach var="i" items="${pageExtraScripts}">
	<script src="${prefix}resources/js/${i}"></script>
</c:forEach>
<%-- pageExtraCSS --%>
<c:forEach var="i" items="${pageExtraCSS}">
	<link rel="stylesheet" href="${prefix}resources/css/${i}">
</c:forEach>
<script src="${prefix}resources/js/cuadro_texto.js"></script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    showProcessingMessages: false,
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] },
    TeX: { equationNumbers: {autoNumber: "AMS"} }
  });
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<script>
marked.setOptions({
  renderer: new marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false, // IMPORTANT, because we do MathJax before markdown,
                   //            however we do escaping in 'CreatePreview'.
  smartLists: true,
  smartypants: false
});
</script>

<script>
var Preview = {
  delay: 50,        // delay after keystroke before updating

  preview: null,     // filled in by Init below
  buffer: null,      // filled in by Init below

  timeout: null,     // store setTimout id
  mjRunning: false,  // true when MathJax is processing
  oldText: null,     // used to check if an update is needed

  //
  //  Get the preview and buffer DIV's
  //
  Init: function () {
    this.preview = document.getElementById("marked-mathjax-preview");
    this.buffer = document.getElementById("marked-mathjax-preview-buffer");
    this.textarea = document.getElementById("marked-mathjax-input");
  },

  //
  //  Switch the buffer and preview, and display the right one.
  //  (We use visibility:hidden rather than display:none since
  //  the results of running MathJax are more accurate that way.)
  //
  SwapBuffers: function () {
    var buffer = this.preview;
    var preview = this.buffer;
    this.buffer = buffer;
    this.preview = preview;
    buffer.style.display = "none";
    buffer.style.position = "absolute";
    preview.style.position = ""; 
    preview.style.display = "";
  },

  //
  //  This gets called when a key is pressed in the textarea.
  //  We check if there is already a pending update and clear it if so.
  //  Then set up an update to occur after a small delay (so if more keys
  //    are pressed, the update won't occur until after there has been 
  //    a pause in the typing).
  //  The callback function is set up below, after the Preview object is set up.
  //
  Update: function () {
    if (this.timeout) {clearTimeout(this.timeout)}
    this.timeout = setTimeout(this.callback,this.delay);
  },

  //
  //  Creates the preview and runs MathJax on it.
  //  If MathJax is already trying to render the code, return
  //  If the text hasn't changed, return
  //  Otherwise, indicate that MathJax is running, and start the
  //    typesetting.  After it is done, call PreviewDone.
  //  
  CreatePreview: function () {
    Preview.timeout = null;
    if (this.mjRunning) return;
    var text = this.textarea.value;
    if (text === this.oldtext) return;
    text = this.Escape(text);                       //Escape tags before doing stuff
    this.buffer.innerHTML = this.oldtext = text;
    this.mjRunning = true;
    MathJax.Hub.Queue(
      ["Typeset",MathJax.Hub,this.buffer],
      ["PreviewDone",this],
      ["resetEquationNumbers", MathJax.InputJax.TeX]
    );
  },

  //
  //  Indicate that MathJax is no longer running,
  //  do markdown over MathJax's result, 
  //  and swap the buffers to show the results.
  //
  PreviewDone: function () {
    this.mjRunning = false;
    text = this.buffer.innerHTML;
    // replace occurrences of &gt; at the beginning of a new line
    // with > again, so Markdown blockquotes are handled correctly
    text = text.replace(/^&gt;/mg, '>');
    this.buffer.innerHTML = marked (text);
    this.SwapBuffers();
  },

  Escape: function (html, encode) {
    return html
      .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
     .replace(/'/g, '&#39;');
  },

  // The idea here is to perform fast updates. See http://stackoverflow.com/questions/11228558/let-pagedown-and-mathjax-work-together/21563171?noredirect=1#comment46869312_21563171
  // But our implementation is a bit buggy: flickering, bad rendering when someone types very fast.
  //
  // If you want to enable such buggy fast updates, you should 
  // add something like  onkeypress="Preview.UpdateKeyPress(event)" to textarea's attributes.
  UpdateKeyPress: function (event) {
    if (event.keyCode < 16 || event.keyCode > 47) {
      this.preview.innerHTML = '<p>' + marked(this.textarea.value) + '</p>';
      this.buffer.innerHTML = '<p>' + marked(this.textarea.value) + '</p>';
    }
    this.Update();
  }
  
};

//
//  Cache a callback to the CreatePreview action
//
Preview.callback = MathJax.Callback(["CreatePreview",Preview]);
Preview.callback.autoReset = true;  // make sure it can run more than once</script>



 <!-- -->
</head>
<body>
	<nav class="navbar navbar-default navbar-fixed-top">
        <div class="navbar-header">
			<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
	            <span class="sr-only">Toggle navigation</span>
	            <span class="icon-bar"></span>
	            <span class="icon-bar"></span>
	            <span class="icon-bar"></span>
          	</button>        
        	<a class='brand' href="home"><IMG SRC="https://d13yacurqjgara.cloudfront.net/users/7056/screenshots/186084/pinapple_apple_logo_r.png" WIDTH=50 HEIGHT=50></a>
        </div>
       	<div id="navbar" class="navbar-collapse collapse">
			<ul class="nav navbar-nav">
				<li><a href="teoria?textobusqueda=&tipo=">Conceptos</a></li>
				<c:choose>
					<c:when test="${not empty user}">
						<li><a href="subida_elem">Subir</a></li>
					</c:when>
				</c:choose>
	            <li class="dropdown">
<!-- 	              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Area<span class="caret"></span></a> -->
<!-- 	              <ul class="dropdown-menu"> -->
<!-- 	                <li><a href="#">Informatica</a></li> -->
<!-- 	                <li role="separator" class="divider"></li> -->
<!-- 	                <li class="dropdown-header">Nav adicional</li> -->
<!-- 	                <li><a href="#">MDL</a></li> -->
<!-- 	                <li><a href="#">EDA</a></li> -->
<!-- 	              </ul> -->
	            </li>				
			</ul>
			
			<c:choose>
				<c:when test="${not empty user}">
					<div class="navbar-form form-inline pull-right">Registrado como: 
					<div class="span2">
						<form method="post">
						<a href="usuario">${user.login}</a>
						<c:choose>
    						<c:when test="${user.admin==true}">
        					Admin 
    						</c:when>    
    						<c:otherwise>
        					Usuario 
    						</c:otherwise>
						</c:choose>
						<a href="deslogeo">Logout</a>
						</form>
					</div>
					</div>
				</c:when>
				<c:otherwise>
					<form class="navbar-form form-inline pull-right"
						action="${prefix}login" id="formularioLogin" method="POST">
						&nbsp; <a href="registro" class="button">Registro</a>
						&nbsp; <a href="login" class="button">Login</a>
					</form>
				</c:otherwise>
			</c:choose>
		</div>
	</nav>